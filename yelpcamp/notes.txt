APP is divided into various versions (since there are various sections). 
Once a section is completed, I put it in a separate branch - so as to store the development in a section by section basis (& comeback to it if need be it).

NOTE: The Master Branch will be the most updated branch.

/////////  SECTION 1 - Basics /////////////////////

1.1 INITIAL ROUTES
    * Add Landing page
    * Add Campgrounds page that lists all campgrounds
    * Each campground  in the campgrounds.ejs has: a) Name b) Image

1.2 SETUP THE PARTIALS 
    * commit fa5ef8acb563b56c8fdbc82801da5ce977062162
    * commit 4ba3d97b625b395a89930d97144a5d882bcd173c

1.3 FEATURE TO ADD NEW CAMPGROUNDS
    * commit c8bd3f52bea63e087e0a5a7cc26a08445a44a357
    * Setup POST Request routes.
    * REST API conventions, if you have a page xyz where you are seeing abc (using GET), if you want to add more abc, you'd have setup a POST request to the same xyz. Also, you need to create a separate page like xyz/new where you put up a form to create a new istance of abc. 

1.4 STYLING THE CAMPGROUNDS PAGE (commit b5ef2f4b650d23084a759447d81c681d0c6fb15c )
    * Add a jumbotron
    * Basic grid system for each campground (including `display: flex; flex-wrap; wrap;` to style attribute to make grid more flexible).
    * Add a `text-center` bootstrap class to center the text for each campground Image
    * NOTE: Above classes flex-wrap, flex, tex center are part of bootstrap not html

1.5 STYLING(cont'd): Basic Navbar & Form design
    * commit e87fecfa44a6fb129d7726e7dc9b2d626c213c4e
    * commit b785b416b36729a3d48ff654674cf8340b3b47f1
      
Overall issues faced:
    * Styling bootstrap was a little difficult (especially the image wrapping parts).

CREATED A NEW BRANCH CALLED `yelpcamp_version1` - for later reference.

///////////  SECTION 2 - Data Persistence ///////////////////

2.1 ADDING & CONFIGURING MONGODB, MONGOOSE (commit f16f4b21087179099f3f7066f409ce57891e3a22)
    * Connect Mongoose to the app
    * Create basic Schema for the campground (Just image, name)
    * Create & store in db whenever a campground is added via "/campgrounds/new" in POST "/campgrounds" route.

2.2 SHOW PAGE 
    * Wrt to the table of RESTful routes, till now INDEX, NEW, CREATE routes have been defined.
    * Next up we want to create the SHOW route. 
    * WARNING: Always put the NEW route before SHOW route (express scans list of declared routes from top to bottom). Else whenever you try to go to 'campgrounds/new' route that 'new' in itself will be treated as an object named "new" and server will try to find it for you. 
    

2.3 BRIEF DETOUR - Change Campground Schema (2.2 + 2.3's commits together: commit a5b99e699b0ca63d861c4789dc2e0fac54d1111b)
    * Changing database schema to include a 'Description' field for each record (Had to purge the DB before changing schema since we dont want different formatted records).
    * Create a couple of dummy object and test it out.
    * Rename the campgrounds.ejs to index.ejs (per thhe RESTful conventions & the table)

2.4 CREATE THE ejs TEMLPLATE FOR 'SHOW' route (commit 1bbb7400cf7b2fe0406a71fc159e0fb7af9de918)
    - The campgrounds will be indexed with the help of the mongoDB id (instead of using the name which is a non-unique way to identify each campground which may result in some conflicts).
    - Use `Campground.findByID()` to fetch that unique campground record and send it to 'show.ejs' which can then render it.
    - Modify 'campgrounds/new' to include a form field for 'Description'
    - Create a 'show.ejs' template that displays location Name, Image, Description (simply, styling will be done later).

OVERALL ISSUES FACED IN Section 2:
    * Forms didn't deliver data via req.body(Issue: I had forgotten to include 'name' attribute to input fields).
    * Took me some time to figure out that indexing each campground by mongodb id is much safer than using the camp's name (might resut in conflicts)

////////// SECTION 3 - Comment ///////////////

3.1 REFACTOR MONGOOSE CODE
    * Create a 'db' directory and put all db related code there.
    * Do module.exports in campgrounds.js and import in app.js

3.2 CREATE A SEEDS FILE (seeds.js)
    * Everytime we update the schema, instead of manually doing everything, executing the seeds.js file will empty the database, fill it in with 3 or 4 sample records. 
    * Workflow will be:
        # Create a seeds.js file
        # Remove all campgrounds, then comments.
        # Add a few hardcoded campgrounds to the collections.
        # Add a same comment to each of the campground record (via data association concept)

    * Next off, create a 'comment.js' file under the 'db' directory and inside that create the commentSchema
    * Associate the commentSchema with campgroundSchema inside campgrounds.js

3.3 TRANSFER ACTUAL COMMENTS DATA FROM COMMENTS COLLECTION TO CAMPGROUND COLLECTION
    * If you open up any record of campground, you will only see some object ID for each of the comment.
    * What we actually want is to pass on the comment itself to the show.ejs along with other data related to campgrounds. To do that you need to populate the campground record fetched inside the SHOW route handler.
    * Then pass on the entire campground object inside the show.ejs and display the comments on that page

    ========= Branch 3 will be created at this point and will be stashed away for later ref ===========

3.4a CREATE COMMENTS
    * Inorder to create comments, you need to do nested routing since each comment will come under a particular campground. 
    * To create a new entry, you need 2 routes viz. (GET) NEW where you fill up a form  b) (POST) CREATE where you add the form data to database. SO in this comments addition case we have:
        (I)  NEW "/campgrounds/:id/comments/new" GET
        (II) CREATE "/campgrounds/:id/comments" POST
    * Since there will be rested routes, some file structuring is required to make things easier.
    * Inside "views" create 2 directories for "comments" & "campgrounds" for respective templates. 

3.4b CREATING COMMENT (GET ROUTE)
    
    * Create a 'newComment.ejs' template for showing a form to fill in comment.
    * Copy paste basic form code from 'newcamp.ejs' and change form submission URL to '/campgrounds/:id/comments' with POST method.
    * In the app.js create a new route handler for the URL GET '/campgrounds/:id/comments/new', fetch the camp by id and then pass it on to 'newComment.ejs' template. 
    
3.4c CREATING COMMENT (POST ROUTE)
    * Create a route handler for POST '/campgrounds/:id/comments' 
    
    * NOTE: Read the bootstrap docs once for forms on POST requests. It seems to be working only when the 'id' attribute and 'name' attribute for a particular filed are same strings. The handler fetches the campground object from DB, inserts the comments and redirects the user to '/campgrounds/:id' page.

    * Include a button to "ADD NEW COMMENT" in the show.ejs template ( of route '/campgrounds/:id/comments' ) that redirects user to '/campgrounds/:id/comments/new' to add comments.
    
    * Keep the values 'name' & 'id' attributes as same to make the bootstrap form work. 

   ======  BRANCH 4 (Version4) will be created at this point to store away all the development done till now.

3.5 STYLING THE show.ejs PAGE
    * Do some bootsrap styling to fit the rough overal structure of the show.ejs template for each campground
    * Add custom CSS to finetune the styling on ejs
        - Make a "public/stylesheet" directory for adding css sheets
        - Create a 'main.css' file for styling show.ejs page
        - To include the stylesheets in the app, type following in app.js : 'app.use(express.static(__dirname + '/public'));'
        - In the main.css include some padding & width properties.

============ Branch 5 was created at this point =====================

///////////////////// SECTION 4 - AUTHENTICATION /////////////////////////////

4.1 Basic Setup for authentication
    - Install passport, passport-local, passport-local-mongoose, express-session
    - Create a 'user.js' file, create a UserSchema to model each user and store it in user.js
    - requie('..) all installed packages into app.js
    - Add all passport methods to UserSchema (inside user.js) with the code `UserSchema.plugin(passportLocalMongoose

4.2  Do basic configuration of passport inside app.js
    - app.use( expressSession(...)); app.use(passport.initialize()); app.use(passport.session()); etc...
    - `passport.use( new LocalStrategy( User.authenticate() )); `
    - `passport.serializeUser( User.serializeUser() );`
    - `passport.deserializeUser( User.deserializeUser() );`

4.3 Setup working skeletal code for Signup
    - Create a simple signup form template (register.ejs) 
    - Create GET and POST route handlers for '/register' (GET for entering data into form , post for authenticating & rerouing them into campgrounds page)
    - Inside the POST route handler:
        # Create a newUser object (inser their username)
        # Register the user with the inbuilt User.register()
        # After registration, authenticate them and redirect them back to '/campgrounds' route.
        # If in case the username already exists, User.register() throws an error for the same

4.4 Setup working skeletal code for Login
    - Setup a login template (login.ejs)
    - Create GET & POST route handlers for '/login' (GET for entering data into form, POST for authenticating & redirecting users into different links depending on whether it was successful or not).

4.5 LOGOUT & ACCESS LOGIC
    - Setup a POST '/logout' route handler  ( User's pluggedin methods will logout the user with a oneline code).
    - Add thehyperlinks '/logout', '/login', '/register' methods to Navbar buttons
    - Setup access restrictions for loggedout users 
        # For eg, comment page can't be accessed unless user is logged in. To do that, you need to create & add a 'isLoggedIn' middleware to both the GET & POST route handlers.

    - If you are logged in, you shouldn't be able to access Login buttons & similarly for logged out button. 
        # Inside app.js before the first route define a middleware that adds to req.locals (i.e set of varable available inside each ejs template) the user profile. 
        # Inside header.ejs, inside navabar code setup visibility access based on if(user){}-else{}
        

/////////////// SECTION 5 - Refactoring //////////////////////////

5.1 CLEANING ROUTES
    - Create a 'routes' directory and inside that 3 files campgrounds.js, auth.js, comments.js
    - Cut/Paste respective routes codes from app.js to respective route files. 
    - You will face a lot of error - DONOT PANIC, trace them line by line, file by file, using console.log()s. 
    - You will need to include the packages at various files wherever appropriate. Similarly you will need to add Schemas to various files wherever appropriate. (you will know which ones to include based on the errors)
    - In the main app.js, you need to add those routes at 2 places. For eg, wrt campground routes you need to add following code:
        (I) `const campgroundRoutes = require('./routes/campgroundRoutes');` at the begining
        (II) `app.use( '/campgrounds', campgroundRoutes);` at the routes section.
        WARNING: Put all the app.use() codes below the middleware that passes user object to all ejs files. Else you won't be able to access user object from any other ejs file. 
    -  Rest of the deets figure out based on the error

    ======= Version 7 will be created at this point ============

5.2 ASSOCIATIONS b/w User & comments
    - On the Comment Schema, we need to add some fields where we can store user ID and user's name. 
    - Update the author field in comment.js with an object (perform data association)
    - Clear the db & manually create a couple of entries
    - In the newComment.ejs template's comment entry form [ route '/campgrounds/:id/comments/new' ], remove the field to enter author's name. 
    - In the commentRoutes.js, we will automatically add user.username to the comment and save it in comments collection (Note: We will get username from req.user.username and since comment pages are accessible only after loggin in, you can be assured that req.user will always be defined - unless some other unusual error pops up).

    =====   Version 8 will be created at this point =============
    
5.3 ASSOCIATIONS b/w User & Campground
    - Users who are loggedin only can see the campground creation form & create campgrounds. To do that add the isLoggedIn middleware to the campground routes.
    - Nextoff, we want to associate the creator of a campground with their username & password i.e. every campground must show the author who created it.
        * Make a change in campgroundSchema to include user's name & id alone.
        * In the route handler POST '/campgrounds' (i.e create new campgrounds) include the author details (from req.user) in the comment object before saving the comments in the database. 

======== At this point, branch 9 will be created & stowed away that includes all dev done till now (for later ref) ===========

/////////////// SECTION 6 - DELETE & UPDATE (only by owners) //////////////

  <briefly recal the RESTful routing chart (we need a form to enter the modified data & the formneeds to be submitted somewhere )>

6.1 EDITING & UPDATING CAMPGROUND [ (EDIT GET /campgrounds/:id) + (UPDATE PUT /campgrounds/:id)]
    - Recall that due to its IDEMPOTENT nature PUT request will be used for editing/updating existing data.
    - Observe that EDIT & UPDATE is like a hybrid of NEW, CREATE & SHOW actions. 
    
    - Inorder to edit, you'd want to have a link like 'campground/:id/edit' where you'd see the form (but pre-filled with existing campground data - waiting to be edited). 
    
    - In this case, you need to create a new 'edit.ejs' file to update the details. Btw, use 'value' attribute in each html input ( & pass on content of current post thru <%=..%> ) in the ejs form template. 
    
    - HTML forms by default don't have a PUT request associated with them - you can only have GET & POST request inside HTML forms(Suprising, ikr!!!). Even if you try to send a PUT request the form will take it as a GET request & not update anything.  
    
    - So you need to use a package called 'method-overwrite' to workaround this deficiency of HTML. 
     
    - Inside the form tag, instead of 'method' attribute type the following: `?_method=PUT`. HTML will still take it as GET request and send the form data via URL query string but since you install the package in the app.js, that package will watch for any `?_method` and if it finds those attributes it will facilitate treatment of the PUT or DELETE request accordingly. In the app.js file, include the following code `app.use(methodOverride("_method"));` 

    - It might be tempting use a POST request instead of all this trouble, but then to follow RESTful conventions, this is what needs to be done.  

6.2 DELETE CAMPGROUNDS
    - Insert feature to delelte comments associated with a given campground"
    - Setup a form inside show.ejs with a button named 'delete'. When you submit the form (i.e click the delete button) you are redirected to app.delete(/campgrounds/:id/delete) route handler.
    - The route handler then deletes the entry from the database and then redirects user to '/campgrounds' page   

SANITIZING USER input
    - While you are displaying HTML, a user can send in malicious JS code with <script> tags.
    - Use the 'express-sanitizer' package to remove all the script tags ( & all contents inside those script tags) out of such code and just return pure html.
    - `app.use('expressSanitizer());` just after bodyParser's app.use(..). To use, go to the route handlers for  the create & update (or any other place where you have form based inputs). To sanitize the form input variable do ` req.body.someVar = req.sanitize(req.body.someVar);`

6.4 AUTHORISATION
    - User can delete/edit their own campgrounds (does the current user's id match the author's id for the campground? If yes, they have permission to edit/delete else no).

    - create a middle ware that checks if they are logged in. Pass the middleware to EDIT/UPDATE & DELETE routes and if yes, then allow them to edit/delete. Protect your update routes (i.e PUT or POST) requests as well since somoene can send in data via POSTMAN even if they dont have access to
    
    - Hide the edit & delete buttons for users who are not logged in or those who are not owners (use an if-else statement inside show.ejs that verifies whether if(currentUser && cureentUser.id==campground.author.id)


6.5 COMMENT AUTHORISATIONs (very similar to campground auth - so notes will be sparse)
    - Add 'Edit' , 'Delete' buttons in the show.ejs 
    - Hyperlink the 'Edit' & 'delete' buttons with appropriate EDIT & DELETE routes for comments
    - Setup route handlers for the EDIt, UPDATE, DELETE routes for comments.
    - Setup a form to edit comments (editComment.ejs template).

    - Restrict user access to editing/deletin actions only to the comments posted by them.

FACING A LOT OF ISSUES WRT FORM DATA HANDLING -LEARN THORUGHLY:
    - WHERE TO USE req.params and WHERE TO USE req.body
    - Know thta for method-overwrite, yu dont need to put a slash before '?' in the form action attribute
    - As always, console.log is your best friend for debugging

    ========== branch 10 wll be created at this point to summarise all development till now ======

////////// SECTION 7 - UI IMPROVEMENTS ///////////////////////

7.1 Using connect-flash package to show onetime flash messages to notify users.
    - `req.flash("success", "some msg to users");` 
        *  Loads up the message in the request object and flashes it to user when they redirect to the next page. 'failure' means red background and 'success' green bg.
        *  You need to put this message before redirecting - else it wont work. 
        *  You still have to hande it on the template in the in next route. 
    - Inside the first middleware of app.js, add a couple of statements to recognize the essages from various 'categories' of flashes like 'error', 'success' etc... (Eg: res.locala.success = req.flash("success"); )

    - Use flash-connect package.
    - Put up a boostrap alert component in header.ejs that receives message from flash package.
    - flash package can send message to different categories (which is stoed in res.locals.categoryname) - these messages will be displayed as flash in the immediate redirect.
    - Update variosu middlewares & routs with req.flash("success", successMsg) or req.flash("error", errMsg)

7.2 LANDING PAGE REFACTOR
    - Follow the HTML & CSS tuts closely

7.3 PRICE EDITING FOR EACH CAMPGROUND
    - Add a 'price:String' entry inside the campgroundSchema
    - In the newcamp.ejs add a input field for entering price
    - In the editCamp.ejs similarly add a field for modifying price.
    - In the show.ejs use JS to pull price from the campground object and display to viewer.
    - Ensure that you retrieve the price data from the forms (for both new & edit cases)
    

///////////////// SECTION 8 - OTHER MISC STUFF   ////////////////////
